plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'signing'

    id "org.jetbrains.kotlin.jvm"
    id 'com.adarshr.test-logger'
    id 'de.jansauer.printcoverage'
    id 'jacoco'
    id "org.jlleitschuh.gradle.ktlint"
    id "java-test-fixtures"
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
    }

    withSourcesJar()
    withJavadocJar()
}

dependencies {
    api 'com.guardsquare:proguard-core:9.0.3'

    api "org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"
    api "org.jetbrains.kotlin:kotlin-stdlib-common:${kotlinVersion}"
    api "org.jetbrains.kotlinx:kotlinx-metadata-jvm:${kotlinxMetadataVersion}"

    testImplementation "org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
    testImplementation 'io.kotest:kotest-runner-junit5-jvm:4.6.0'
    testImplementation 'io.kotest:kotest-runner-junit5-jvm:4.6.0'
    testFixturesImplementation "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
    testFixturesImplementation group: "dev.zacsweers.kctfork", name: "core", version: "0.2.1"
    testFixturesImplementation 'io.kotest:kotest-runner-junit5-jvm:5.5.4' // for kotest framework
    testImplementation 'io.kotest:kotest-runner-junit5-jvm:5.5.4' // for kotest framework
    testImplementation 'io.kotest:kotest-assertions-core-jvm:5.5.4' // for kotest core jvm assertions
    testFixturesImplementation 'io.kotest:kotest-assertions-core-jvm:5.5.4' // for kotest core jvm assertions

    testImplementation 'io.kotest:kotest-property-jvm:5.5.4' // for kotest property test
    testImplementation 'io.kotest:kotest-framework-datatest:5.5.4'
    testImplementation 'io.mockk:mockk:1.13.3' // for mocking
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0' // for junit framework
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0' // for junit framework

    testFixturesImplementation("com.guardsquare:proguard-assembler:1.0.0")
}

// Early access automatic downloads are not yet supported:
// https://github.com/gradle/gradle/issues/14814
// But it will work if e.g. Java N-ea is pre-installed
def javaVersionsForTest = 9..19

test {
    useJUnitPlatform()
}

task testAllJavaVersions() { testAllTask ->
    dependsOn(test) // the usual test runs on Java 8

    javaVersionsForTest.each {version ->

        task("testJava$version", type: Test) {

            // The version of bytebuddy used by mockk only supports Java 20 experimentally so far
            if (version == 20) systemProperty 'net.bytebuddy.experimental', true

            useJUnitPlatform()

            testAllTask.dependsOn(it)

            javaLauncher = javaToolchains.launcherFor {
                languageVersion = JavaLanguageVersion.of(version)
            }
        }
    }
}

jacocoTestReport {
    // Define which classes need to be monitored
    def sources = files(sourceSets.main.allSource.srcDirs)
    sourceDirectories.setFrom(sources)
    additionalSourceDirs.setFrom(sources)
    sourceDirectories.setFrom(sources)
    def classes = files(sourceSets.main.output.classesDirs)
    classDirectories.setFrom(classes)
    executionData.setFrom project.fileTree(dir: '.', include: '**/build/jacoco/*.exec')
    reports {
        xml.enabled = true
        csv.enabled = false
        html.destination file("${buildDir}/reports/coverage")
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) { publication ->
            groupId = 'com.guardsquare'
            artifactId = 'proguard-assembler'
            version = version
            pom {
                name = "ProGuard Assembler and Disassembler"
                description = 'The ProGuard Assembler and Disassembler can assemble and disassemble Java class files.'
                url = "https://github.com/Guardsquare/kotlin-metadata-printer"
                licenses {
                    license {
                        name = 'Apache License Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }
                issueManagement {
                    system = 'Github Tracker'
                    url = 'https://github.com/Guardsquare/proguard-assembler/issues'
                }
                scm {
                    url = 'https://github.com/Guardsquare/proguard-assembler.git'
                    connection = 'scm:git:https://github.com/Guardsquare/proguard-assembler.git'
                }
                developers {
                    developer {
                        id = 'james.hamilton'
                        name = 'James Hamilton'
                        organization = 'Guardsquare'
                        organizationUrl = 'https://www.guardsquare.com/'
                        roles = ['Project Administrator', 'Developer']
                    }
                }
            }

            from components.java

            if (project.hasProperty('PROGUARD_SIGNING_KEY')) {
                // We use in-memory ascii-armored keys
                // See https://docs.gradle.org/current/userguide/signing_plugin.html#sec:in-memory-keys
                signing {
                    String key = project.findProperty('PROGUARD_SIGNING_KEY')
                    String password = project.findProperty('PROGUARD_SIGNING_PASSWORD')
                    useInMemoryPgpKeys(key, password)
                    sign publication
                }
            }
        }
    }
}
