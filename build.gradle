import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id 'com.github.johnrengelman.shadow'
    id 'distribution'
    id 'java'
    id 'maven-publish'
    id 'signing'
}

wrapper {
    gradleVersion = '6.4'
    distributionType = Wrapper.DistributionType.ALL
}

group = 'com.guardsquare'
version = '7.0.0'

repositories {
    mavenLocal()
    jcenter()
}

sourceCompatibility = "${target}"
targetCompatibility = "${target}"

sourceSets.main {
    java {
        srcDirs = ['src']
    }
    resources {
        srcDirs = ['src']
        include '**/*.properties'
        include '**/*.gif'
        include '**/*.png'
        include '**/*.pro'
    }
}

dependencies {
    compile 'com.guardsquare:proguard-core:7.0.0'
}

task fatJar(type: ShadowJar) {
    destinationDirectory.set(file("$rootDir/lib"))
    archiveFileName.set('assembler.jar')
    from sourceSets.main.output
    configurations = [project.configurations.runtime]
    manifest {
        attributes(
                'Main-Class': 'proguard.Assembler',
                'Implementation-Version': archiveVersion.get())
    }
}

assemble.dependsOn fatJar

distributions {
    main {
        distributionBaseName.set('proguard-assembler')
        contents {
            into('lib') {
                from fatJar.outputs
            }
            into('docs') {
                from('docs/md') {
                    includeEmptyDirs = false
                    include '**/*.md'
                }
            }
            from(rootDir) {
                include 'bin/'
                include 'LICENSE'
            }
        }
    }
}

distTar {
    compression = Compression.GZIP
    archiveExtension.set('tar.gz')
}

publishing {
    publications {
        create('proguardAssembler', MavenPublication) {
            from components.java
            pom {
                name = "[$groupId] $artifactId"
                description = 'The ProGuard Assembler and Disassembler can assemble and disassemble Java class files.'
                url = 'https://github.com/Guardsquare/proguard-assembler'
                developers {
                    developer {
                        id = 'lafortune'
                        name = 'Eric Lafortune'
                        url = 'https://www.guardsquare.com/proguard'
                        organization = 'Guardsquare'
                        organizationUrl = 'https://www.guardsquare.com/'
                        roles = ['Project Administrator', 'Developer']
                    }
                }
                licenses {
                    license {
                        name = 'Apache License Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }
                issueManagement {
                    system = 'Github Tracker'
                    url = 'https://github.com/Guardsquare/proguard-assembler/issues'
                }
                scm {
                    url = 'https://github.com/Guardsquare/proguard-assembler.git'
                    connection = 'scm:git:https://github.com/Guardsquare/proguard-assembler.git'
                }
                properties = [
                        'project.build.sourceEncoding': 'UTF-8'
                ]
            }
        }
    }
    repositories {
        maven {
            name = 'Github'
            url = uri('https://maven.pkg.github.com/guardsquare/proguard-assembler')
            credentials {
                username = project.findProperty('PROGUARD_GITHUB_USERNAME')
                password = project.findProperty('PROGUARD_GITHUB_TOKEN')
            }
        }
        maven {
            name = 'Sonatype'
            url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
            credentials(PasswordCredentials) {
                username = findProperty('PROGUARD_STAGING_USERNAME')
                password = findProperty('PROGUARD_STAGING_PASSWORD')
            }
        }
    }
}

// We use in-memory ascii-armored keys
// See https://docs.gradle.org/current/userguide/signing_plugin.html#sec:in-memory-keys

signing {
    String key = findProperty('PROGUARD_SIGNING_KEY')
    String password = findProperty('PROGUARD_SIGNING_PASSWORD')
    useInMemoryPgpKeys(key, password)
    sign publishing.publications.proguardAssembler
}

clean {
    delete file("$rootDir/lib")
}
